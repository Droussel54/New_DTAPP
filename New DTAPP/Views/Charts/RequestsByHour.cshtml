@using static Constants
@model New_DTAPP.Models.TransferModel
@{
    ViewData["Title"] = "Charts";
}
<h1>Data Transfer Requests by Hour</h1>
<form asp-action="RequestsByHour">
    <input type="hidden" name="filtered" value="ButtonClicked" />
    <div class="row">
        <div class="col">
            <div class="form-group">
                <label for="selectedUnit">Client Unit</label>
                @Html.DropDownList("selectedUnit", ViewBag.ClientUnitId, "", htmlAttributes: new { @class = "form-select" })

            </div>
        </div>
        <div class="col">
            <div class="form-group">
                <label for="raisedAfter">Raised After:</label>
                @Html.TextBox("raisedAfter", ViewBag.RaisedAfter, "", htmlAttributes: new { @class = "datefield form-select", type = "datetime-local" })
            </div>
        </div>
        <div class="col">
            <div class="form-group">
                <label for="raisedBefore">Raised Before:</label>
                @Html.TextBox("raisedBefore", ViewBag.RaisedBefore, "", htmlAttributes: new { @class = "datefield form-select", type = "datetime-local" })
            </div>
        </div>
        <div class="col">
            <div class="form-group">
                <label for="selectedCompletedUser">Completed User</label>
                @Html.DropDownList("selectedCompletedUser", ViewBag.CompletedUserId, "", htmlAttributes: new { @class = "form-select" })
            </div>
        </div>
        <div class="col">
            <div class="form-group">
                <label for="filterSpillOccurred">Spill Occurred</label>
                @Html.CheckBox("filterSpillOccurred", ViewBag.FilterSpillOccurred, htmlAttributes: new { @class = "form-check" })
            </div>
        </div>
        <div class="col">
            <div class="form-group">
                <label for="filterTransferDenied">Transfer Denied</label>
                @Html.CheckBox("filterTransferDenied", ViewBag.FilterTransferDenied, htmlAttributes: new { @class = "form-check" })
            </div>
        </div>
        <div class="col" style="align-self: end; text-align: end;">
            <button type="submit" style="border: 0; background: transparent">
                <img src="~/images/More.png" height="20" width="20" title="Filter" />
            </button>
            <a asp-action="RequestsByHour"
               asp-route-clearFilters="true">
                <img src="~/images/Cancel.png" height="20" width="20" title="Clear" />
            </a>
        </div>
    </div>
</form>
<style>
    #chartdiv {
        width: 100%;
        height: 65vh;
    }
</style>

<div id="chartdiv"></div>
<a class="btn btn-primary" asp-action="Index">Back</a>
<script src="~/js/amCharts/core.js"></script>
<script src="~/js/amCharts/charts.js"></script>
<script src="~/js/amCharts/themes/animated.js"></script>

<script>
    var json = '@ViewBag.jsonData';
    json = json.replaceAll("&quot;", "\"")
    var data = JSON.parse(json);
    for (i = 0; i < 24; i++) { 
        addItem = true;
        for (x = 0; x < data.length; x++) {
            if (data[x].hour == i) {
                addItem = false;
            }
        }
        if (addItem) {
            data.push({ "hour": i, "count": 0 });
            console.log("Add " + i);
        }
    } 
    data.sort(function (a, b) {
        return a.hour - b.hour;
    });


    am4core.addLicense('@Constants.licensekey');
    am4core.ready(function () {
        am4core.useTheme(am4themes_animated);
        var chart = am4core.create("chartdiv", am4charts.XYChart);
        chart.data = data;
        

        //enable exporting menu
        chart.exporting.menu = new am4core.ExportMenu();
        

        //modify export menu to be single level with icon and hover text
        chart.exporting.menu.items = [{
           "icon": "/images/file-jpg.png",
           "type" : "jpg",
           "title" : "Export as JPG",
           "action": function () {
                        chart.exporting.export("jpg");
                    }
        }];

       
        //set default export file name to include date & chart name
        chart.exporting.filePrefix = generateFilePrefix();

        function generateFilePrefix() {
            var date = new Date().toISOString().slice(0, 10);
            return "RequestsByHour" + "_" + date;
        };

        //add watermark with chart name & export date as watermark that only appears on exportation
        var watermark = chart.createChild(am4core.Label);
        watermark.text = "Data Transfer Requests by Hour, exported: " + new Date().toISOString().slice(0, 10);
        watermark.align = "right";
        watermark.fillOpacity = 0.5;
        watermark.disabled = true;

        // Enable watermark on export
        chart.exporting.events.on("exportstarted", function (ev) {
            watermark.disabled = false;
        });

        // Disable watermark when export finishes
        chart.exporting.events.on("exportfinished", function (ev) {
            watermark.disabled = true;
        });


        var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
        categoryAxis.dataFields.category = "hour";

        //time labels to zulu
        categoryAxis.renderer.labels.template.adapter.add("text", function (text, target) {
        
            if (target.dataItem && target.dataItem.category !== undefined) {
               var hour = target.dataItem.category;
                console.log("Parsed text: ", hour);
            return hour.toString().padStart(2, '0') + ":00Z";
        }
        return "";
  
        });

        categoryAxis.renderer.grid.template.location = 0;
        categoryAxis.renderer.minGridDistance = 50;
        chart.cursor = new am4charts.XYCursor();

        var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

        // Create series
        var series = chart.series.push(new am4charts.LineSeries());
        series.dataFields.valueY = "count";
        series.dataFields.categoryX = "hour";
        series.strokeWidth = 2;
        series.tensionX = 0.8;
        series.tensionY = 1;
        series.name = "Count";
      
        //Timeblock from EST to UTC

        var startTime = convertToUTC(7);
        var endTime = convertToUTC(17);

        function convertToUTC(estTime) {
            var utcHour = (estTime + 5) % 24;

            return utcHour;
        }     

        // Create range for time block
        var range = categoryAxis.axisRanges.create();
        range.category = startTime;
        range.endCategory = endTime;


        range.axisFill.fill = am4core.color("#50314c");
        range.axisFill.fillOpacity = .2;
        range.label.hidden = true;
        
        
    }); // end am4core.ready()

</script> 